

 var player;
    var layer;
    var collideLayer;
    var map;
    var collisionMap;
    var noteKey;
    var speed = 100;
    var music;
    var lastNote;
    var lastNoteText;
    var showNote;
    var envelope;
    var key;
    var envelopeIndex = 0;
    var keysIndex = 0;
    var numberOfKeys = 0;
    var keysText;
    var door;

function update() 
    {
        //player.body.velocity.x = 0;
        //player.body.velocity.y = 0;
        
        if(keys.right.isDown)
            {
                player.body.velocity.x = speed;
                player.animations.play('right');
            }
        else if(keys.left.isDown)
            {
                player.body.velocity.x = -speed;
                player.animations.play('left');
            }
        else if(keys.up.isDown)
            {
                player.body.velocity.y = -speed;
                player.animations.play('up');
            }
        else if(keys.down.isDown)
            {
                player.body.velocity.y = speed;
                player.animations.play('down');
            }
        
        
        game.physics.arcade.overlap(envelope, player, pickUpEnvelope);
        game.physics.arcade.collide(player, collideLayer);
        
        if(game.physics.arcade.collide(player, door) && numberOfKeys > 0)
            {
                openDoor();
            }
        key.update();
        
        noteKey.onDown.add(toggleNote, this);
    }


    function toggleNote()
    {
        showNote = !showNote;
    }
    
    function initEnvelopes()
    {
        envelope = game.add.sprite(128, 256, 'Envelope')
        game.physics.enable(envelope, Phaser.Physics.ARCADE);

    }
    
    function initKeys()
    {
        this.key = game.add.sprite(128, 312, 'Key');
        this.game.physics.enable(key, Phaser.Physics.ARCADE);
        this.key.body.setSize(24, 24, 5, 16);
    }
    
    function initDoors()
    {
        door = game.add.sprite(450, 285, 'Door');
        game.physics.enable(door, Phaser.Physics.ARCADE);
        door.body.immovable = true;
        door.body.moves = false;
    }
    
    function pickUpEnvelope()
    {
        envelopeIndex++;
        switch(envelopeIndex)
            {
                case 1:
                    lastNoteText = 'Use key on the door';
                    envelope.x = 995;
                    envelope.y = 440;
                    break;
                case 2:
                    lastNoteText = 'Something wicked approaches...';
                    envelope.x = 1345;
                    envelope.y = 550;
                    break;
                case 3:
                    lastNoteText = 'The air feels uneasy...';
                    envelope.x = 2800;
                    envelope.y = 580;
                    break;
                case 4:
                    lastNoteText = 'do not let him find you';
                    envelope.kill();
                    break;
                default:
                    break;
            }
    }
    
    function pickUpKey()
    {
        numberOfKeys++;
        keysIndex++;
        
        switch(keysIndex)
            {
                case 1:
                    key.x = 2150;
                    key.y = 420;
                    break;
                case 2:
                    key.x = 3860;
                    key.y = 40;
                    break;
                case 3:
                    key.kill();
                    break;
                default:
                    break;
            }
    }
    
    function openDoor()
    {
        numberOfKeys--;
        doorIndex++;
        
        switch(doorIndex)
            {
                case 1:
                    door.x = 4665;
                    door.y = 450;
                    break;
                case 2:
                    door.kill();
                    break;
                default:
                    break;
            }
    }
    


function render()
    {
        if(showNote)
            {
                lastNote.text = lastNoteText;
                keysText.text = 'x' + numberOfKeys;
                lastNote.text.anchor(0.5, 0.5);
                lastNote.x = player.x - (lastNote.textWidth * 0.5); //Centers text
                lastNote.y = player.y - 25;
                keysText.x = player.x + 30;
                keysText.y = player.y;
            }
        else
            {
                lastNote.text = '';
                keysText.text = '';
            }
        
        //game.debug.text('' + player.x + ', ' + player.y , 100, 100);
    }

Player.prototype.update = function()
{
    this.player.body.velocity.x = 0;
    this.player.body.velocity.y = 0;
    
    if(this.movementKeys.right.isDown)
            {
                this.player.body.velocity.x = this.playerSpeed;
                this.player.animations.play('right');
            }
    else if(this.movementKeys.left.isDown)
            {
                this.player.body.velocity.x = -this.playerSpeed;
                this.player.animations.play('left');
            }
    else if(this.movementKeys.up.isDown)
            {
                this.player.body.velocity.y = -this.playerSpeed;
                this.player.animations.play('up');
            }
    else if(this.movementKeys.down.isDown)
            {
                this.player.body.velocity.y = this.playerSpeed;
                this.player.animations.play('down');
            }
    
    if(this.displayAllKey.isDown)
        {
            this.displayAll = true;
        }
    else
        {
            this.displayAll = false;
        }
    
    this.game.physics.arcade.collide(this.player, this.colliderLayer);
}

Player.prototype.render = function()
{
    if(this.displayNote)
            {
                this.noteText.text = this.currentNote;
                this.keysText.text = 'x' + this.numberOfKeys;
                this.noteText.text.anchor(0.5, 0.5);
                this.noteText.x = this.player.x - (this.noteText.textWidth * 0.5); //Centers text
                this.noteText.y = this.player.y - 25;
                this.keysText.x = this.player.x + 30;
                this.keysText.y = this.player.y;
            }
        else
            {
                this.noteText.text = '';
                this.keysText.text = '';
            }
    
    if(this.displayAll)
        {
            this.allText.text = this.displayAllNotes();
            this.allText.x = this.player.x - (this.allText.textWidth * 0.5);
            this.allText.y = this.player.y - 64;
        }
    else
        {
            this.allText.text = '';
        }
}

Player.prototype.displayAllNotes = function()
{
    var str = '';
    for(var i = 0; i < this.notesList.length; ++i)
        {
            str += i + '. ' + this.notesList[i] + '\n';
        }
    
    return str;
}

if(randomValue <= 50)
        {
            if (this.enemy.y < this.player.player.y - errorMargin) 
    {
        this.enemy.body.velocity.y = this.enemySpeed;
    }
    else if (this.enemy.y > this.player.player.y + errorMargin) 
    {
        this.enemy.body.velocity.y = -this.enemySpeed;
    }
    else if(this.enemy.x < this.player.player.x - 4)
    {
        this.enemy.body.velocity.x = this.enemySpeed;
    }
    else if(this.enemy.x > this.player.player.x + 4)
    {
        this.enemy.body.velocity.x = -this.enemySpeed;
    }
        }
    else
        {
            if(this.enemy.x < this.player.player.x - 4)
                {
                    this.enemy.body.velocity.x = this.enemySpeed;
                }
            else if(this.enemy.x > this.player.player.x + 4)
                {
                    this.enemy.body.velocity.x = -this.enemySpeed;
                }
            else if(this.enemy.y < this.player.player.y - errorMargin)
                {
                    this.enemy.body.velocity.y = this.enemySpeed;
                }
            else if(this.enemy.y > this.player.player.y + errorMargin)
                {
                    this.enemy.body.velocity.y = -this.enemySpeed;
                }
        }